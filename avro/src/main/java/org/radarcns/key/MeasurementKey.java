/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.key;  
@SuppressWarnings("all")
/** Measurement key */
@org.apache.avro.specific.AvroGenerated
public class MeasurementKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MeasurementKey\",\"namespace\":\"org.radarcns.key\",\"doc\":\"Measurement key\",\"fields\":[{\"name\":\"deviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"device timestamp ID\"},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"user ID\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** device timestamp ID */
  @Deprecated public java.lang.String deviceId;
  /** user ID */
  @Deprecated public java.lang.String userId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public MeasurementKey() {}

  /**
   * All-args constructor.
   */
  public MeasurementKey(java.lang.String deviceId, java.lang.String userId) {
    this.deviceId = deviceId;
    this.userId = userId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return deviceId;
    case 1: return userId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: deviceId = (java.lang.String)value$; break;
    case 1: userId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'deviceId' field.
   * device timestamp ID   */
  public java.lang.String getDeviceId() {
    return deviceId;
  }

  /**
   * Sets the value of the 'deviceId' field.
   * device timestamp ID   * @param value the value to set.
   */
  public void setDeviceId(java.lang.String value) {
    this.deviceId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * user ID   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * user ID   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /** Creates a new MeasurementKey RecordBuilder */
  public static org.radarcns.key.MeasurementKey.Builder newBuilder() {
    return new org.radarcns.key.MeasurementKey.Builder();
  }
  
  /** Creates a new MeasurementKey RecordBuilder by copying an existing Builder */
  public static org.radarcns.key.MeasurementKey.Builder newBuilder(org.radarcns.key.MeasurementKey.Builder other) {
    return new org.radarcns.key.MeasurementKey.Builder(other);
  }
  
  /** Creates a new MeasurementKey RecordBuilder by copying an existing MeasurementKey instance */
  public static org.radarcns.key.MeasurementKey.Builder newBuilder(org.radarcns.key.MeasurementKey other) {
    return new org.radarcns.key.MeasurementKey.Builder(other);
  }
  
  /**
   * RecordBuilder for MeasurementKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MeasurementKey>
    implements org.apache.avro.data.RecordBuilder<MeasurementKey> {

    private java.lang.String deviceId;
    private java.lang.String userId;

    /** Creates a new Builder */
    private Builder() {
      super(org.radarcns.key.MeasurementKey.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.radarcns.key.MeasurementKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.deviceId)) {
        this.deviceId = data().deepCopy(fields()[0].schema(), other.deviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing MeasurementKey instance */
    private Builder(org.radarcns.key.MeasurementKey other) {
            super(org.radarcns.key.MeasurementKey.SCHEMA$);
      if (isValidValue(fields()[0], other.deviceId)) {
        this.deviceId = data().deepCopy(fields()[0].schema(), other.deviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'deviceId' field */
    public java.lang.String getDeviceId() {
      return deviceId;
    }
    
    /** Sets the value of the 'deviceId' field */
    public org.radarcns.key.MeasurementKey.Builder setDeviceId(java.lang.String value) {
      validate(fields()[0], value);
      this.deviceId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'deviceId' field has been set */
    public boolean hasDeviceId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'deviceId' field */
    public org.radarcns.key.MeasurementKey.Builder clearDeviceId() {
      deviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'userId' field */
    public java.lang.String getUserId() {
      return userId;
    }
    
    /** Sets the value of the 'userId' field */
    public org.radarcns.key.MeasurementKey.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'userId' field has been set */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'userId' field */
    public org.radarcns.key.MeasurementKey.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public MeasurementKey build() {
      try {
        MeasurementKey record = new MeasurementKey();
        record.deviceId = fieldSetFlags()[0] ? this.deviceId : (java.lang.String) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
